import com.intellij.database.model.DasTable
import com.intellij.database.util.Case
import com.intellij.database.util.DasUtil

import java.text.SimpleDateFormat

/*
 * Available context bindings:
 *   SELECTION   Iterable<DasObject>
 *   PROJECT     project
 *   FILES       files helper
 */

packageName = "com.sample;"
typeMapping = [

        (~/(?i)number/)                   : "BigDecimal",
        (~/(?i)varchar/)                  : "String",
        (~/(?i)blob/)                     : "byte[]",

        (~/(?i)int/)                      : "long",
        (~/(?i)float|double|decimal|real/): "double",
        (~/(?i)datetime|timestamp/)       : "Date",
        (~/(?i)date/)                     : "Date",
        (~/(?i)/)                         : "String"
]

FILES.chooseDirectoryAndSave("Choose directory", "Choose where to store generated files") { dir ->
    SELECTION.filter { it instanceof DasTable }.each { generate(it, dir) }
}

def generate(table, dir) {
    def className = javaName(table.getName(), true)
    def fields = calcFields(table)
    packageName = getPackageName(dir)
    PrintWriter printWriter = new PrintWriter(new OutputStreamWriter(new FileOutputStream(new File(dir, className + ".java")), "UTF-8"))
    printWriter.withPrintWriter { out -> generate(out, className, fields, table) }
//    new File(dir, className + ".java").withPrintWriter { out -> generate(out, className, fields) }
}

def getPackageName(dir) {
    return dir.toString().replaceAll("\\\\", ".").replaceAll("/", ".").replaceAll("^.*src(\\.main\\.java\\.)?", "")
}

def generate(out, className, fields, table) {
    out.println "package $packageName;"
    out.println ""
    out.println ""
    out.println "import com.baomidou.mybatisplus.annotation.TableField;"
    out.println "import com.baomidou.mybatisplus.annotation.TableName;"
    out.println "import io.swagger.annotations.ApiModel;"
    out.println "import io.swagger.annotations.ApiModelProperty;"
    out.println "import lombok.AllArgsConstructor;"
    out.println "import lombok.Builder;"
    out.println "import lombok.Data;"
    out.println "import lombok.NoArgsConstructor;"

    Set types = new HashSet()
    fields.each() {
        types.add(it.type)
    }
    if (types.contains("Date")) {
        out.println "import java.util.Date;"
        out.println "import com.fasterxml.jackson.annotation.JsonFormat;"

    }
    if (types.contains("BigDecimal")) {
        out.println "import java.math.BigDecimal;"

    }
    out.println ""
    out.println "/**\n" +
            "* @author diaoyn\n" +
            "* @version 1.0\n" +
            "* @package $packageName\n" +
            "* @date" + new SimpleDateFormat("yyyy-MM-dd HH:mm").format(new Date()) + "\n" +
            "*/"
    out.println ""
    out.println "@Data"
    out.println "@Builder"
    out.println "@NoArgsConstructor"
    out.println "@AllArgsConstructor"
    out.println "@TableName(value = \"" + table.getName() + "\")"
    out.println "@ApiModel(value = \"$packageName.$className\", description = \"" + table.getComment() + "\")"
    out.println ""
//
    out.println "public class $className {"
    out.println ""
    fields.each() {
        out.println "    @TableField(value = \"${it.oname}\")"
        if ("${it.type}" == "Date") {
            out.println "    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")"

        }
        out.println "    @ApiModelProperty(value = \"${it.comment}\")"
        out.println "    private ${it.type} ${it.name};"
        out.println ""
    }
    out.println ""
    out.println "}"
}

def calcFields(table) {
    DasUtil.getColumns(table).reduce([]) { fields, col ->
        def spec = Case.LOWER.apply(col.getDataType().getSpecification())
        def typeStr = typeMapping.find { p, t -> p.matcher(spec).find() }.value
        fields += [[
                           oname  : col.getName(),
                           comment: col.getComment(),
                           name   : javaName(col.getName(), false),
                           type   : typeStr,
                           annos  : ""]]
    }
}

def javaName(str, capitalize) {
    def s = com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)
            .collect { Case.LOWER.apply(it).capitalize() }
            .join("")
            .replaceAll(/[^\p{javaJavaIdentifierPart}[_]]/, "_")
    capitalize || s.length() == 1 ? s : Case.LOWER.apply(s[0]) + s[1..-1]
}
